#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef AUDIENZZIOSSDK_SWIFT_H
#define AUDIENZZIOSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AudienzziOSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// The Data object is free form data (also known as First Party Data) supplied by the publisher to provide additional targeting of the user or inventory context, used primarily for striking PMP (Private MarketPlace) deals with Advertisers. Data supplied in the data parameters are typically not sent to DSPs whereas information sent in non-data objects (i.e. setYearOfBirth, setGender, etc.) will be. Access to FPD can be limited to a supplied set of Prebid bidders via an access control list.
/// Data is broken up into two different data types:
/// User
/// Global in scope only
/// Inventory (context)
/// Global scope
/// Ad Unit grain
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK39AUADunitConfigurationDataObjectProtocol_")
@protocol AUADunitConfigurationDataObjectProtocol
/// This method obtains the ext data keyword & value for adunit targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addExtDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the ext data keyword & values for adunit targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateExtDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific ext data keyword & values set from adunit targeting
- (void)removeExtDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all ext data set from adunit targeting
- (void)clearExtData;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK10AUAdFormat")
@interface AUAdFormat : NSObject
@property (nonatomic, readonly) NSInteger rawValue;
@property (nonatomic, readonly, copy) NSString * _Nullable stringEquivalent;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue stringEquivalent:(NSString * _Nonnull)stringEquivalent;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUAdFormat * _Nonnull banner;)
+ (AUAdFormat * _Nonnull)banner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUAdFormat * _Nonnull video;)
+ (AUAdFormat * _Nonnull)video SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUAdFormat * _Nonnull native;)
+ (AUAdFormat * _Nonnull)native SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AUAdFormat *> * _Nonnull allCases;)
+ (NSArray<AUAdFormat *> * _Nonnull)allCases SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AUAdInterstitialPosition, "AUAdInterstitialPosition", closed) {
  AUAdInterstitialPositionUndefined = -1,
  AUAdInterstitialPositionTopLeft = 0,
  AUAdInterstitialPositionTopCenter = 1,
  AUAdInterstitialPositionTopRight = 2,
  AUAdInterstitialPositionCenter = 3,
  AUAdInterstitialPositionBottomLeft = 4,
  AUAdInterstitialPositionBottomCenter = 5,
  AUAdInterstitialPositionBottomRight = 6,
  AUAdInterstitialPositionCustom = 7,
};

/// <ul>
///   <li>
///     Ad position on screen. Refer to List 5.4:
///   </li>
///   <li>
///     The following table specifies the position of the ad as a relative measure of visibility or prominence. This
///   </li>
///   <li>
///     OpenRTB table has values derived from the Inventory Quality Guidelines (IQG). Practitioners should
///   </li>
///   <li>
///     keep in sync with updates to the IQG values as published on IAB.com. Values “4” - “7” apply to apps per
///   </li>
///   <li>
///     the mobile addendum to IQG version 2.1.
///   </li>
///   <li>
///     Value Description
///   </li>
///   <li>
///     0 Unknown
///   </li>
///   <li>
///     1 Above the Fold
///   </li>
///   <li>
///     2 DEPRECATED - May or may not be initially visible depending on screen size/resolution.
///   </li>
///   <li>
///     3 Below the Fold
///   </li>
///   <li>
///     4 Header
///   </li>
///   <li>
///     5 Footer
///   </li>
///   <li>
///     6 Sidebar
///   </li>
///   <li>
///     7 Full Screen
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, AUAdPosition, "AUAdPosition", closed) {
  AUAdPositionUndefined = 0,
  AUAdPositionHeader = 4,
  AUAdPositionFooter = 5,
  AUAdPositionSidebar = 6,
  AUAdPositionFullScreen = 7,
};

@class AUMORTBAppContent;
@class AUMORTBContentData;

/// The ContentObject allows you to provide more details about content within the app. All properties provided to the ContentObject will be sent in the app.content field of the bid request
/// Using the following methods you can add app.content.data objects to the bid requests.
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK39AUAdUnitConfigurationAppContentProtocol_")
@protocol AUAdUnitConfigurationAppContentProtocol
- (void)setAppContent:(AUMORTBAppContent * _Nonnull)appContentObject;
- (AUMORTBAppContent * _Nullable)getAppContent SWIFT_WARN_UNUSED_RESULT;
- (void)clearAppContent;
- (void)addAppContentData:(NSArray<AUMORTBContentData *> * _Nonnull)dataObjects;
- (void)removeAppContentData:(AUMORTBContentData * _Nonnull)dataObject;
- (void)clearAppContentData;
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK40AUAdUnitConfigurationAutorefreshProtocol_")
@protocol AUAdUnitConfigurationAutorefreshProtocol
/// This method allows to set the auto refresh period for the demand
/// \param time refresh time interval
///
- (void)setAutoRefreshMillisWithTime:(double)time;
/// This method stops the auto refresh of demand
- (void)stopAutoRefresh;
/// This method resume the auto refresh
- (void)resumeAutoRefresh;
@end


/// Ad Unit context keywords object is a free form list of comma separated keywords about the app as defined in app.keyword in OpenRTB 2.5. The addContextKeyword function adds a single keyword to the ad unit.
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK43AUAdUnitConfigurationContextKeywordProtocol_")
@protocol AUAdUnitConfigurationContextKeywordProtocol
/// This method obtains the keyword for adunit targeting
/// Inserts the given element in the set if it is not already present.
- (void)addExtKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the keyword set for adunit targeting
/// Adds the elements of the given set to the set.
- (void)addExtKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific keyword from adunit targeting
- (void)removeExtKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of adunit targeting
- (void)clearExtKeywords;
@end


/// Using the following method, you can set the impression-level GPID value to the bid request:
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK33AUAdUnitConfigurationGRIPProtocol_")
@protocol AUAdUnitConfigurationGRIPProtocol
- (void)setGPID:(NSString * _Nullable)gpid;
- (NSString * _Nullable)getGPID SWIFT_WARN_UNUSED_RESULT;
@end


/// Ad Slot is an identifier tied to the placement the ad will be delivered in
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK33AUAdUnitConfigurationSlotProtocol_")
@protocol AUAdUnitConfigurationSlotProtocol
@property (nonatomic, copy) NSString * _Nullable adSlot;
@end


/// Using the following methods you can add user.data objects to the bid requests.
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK37AUAdUnitConfigurationUserDataProtocol_")
@protocol AUAdUnitConfigurationUserDataProtocol
- (NSArray<AUMORTBContentData *> * _Nullable)getUserData SWIFT_WARN_UNUSED_RESULT;
- (void)addUserData:(NSArray<AUMORTBContentData *> * _Nonnull)userDataObjects;
- (void)removeUserData:(AUMORTBContentData * _Nonnull)userDataObject;
- (void)clearUserData;
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK25AUAdUnitConfigurationType_")
@protocol AUAdUnitConfigurationType <AUADunitConfigurationDataObjectProtocol, AUAdUnitConfigurationAppContentProtocol, AUAdUnitConfigurationAutorefreshProtocol, AUAdUnitConfigurationContextKeywordProtocol, AUAdUnitConfigurationGRIPProtocol, AUAdUnitConfigurationSlotProtocol, AUAdUnitConfigurationUserDataProtocol>
@end


@class NSCoder;

SWIFT_CLASS("_TtC14AudienzziOSSDK11VisibleView")
@interface VisibleView : UIView
+ (void)awakeFromNib;
- (void)didMoveToWindow;
- (void)removeFromSuperview;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK8AUAdView")
@interface AUAdView : VisibleView
@property (nonatomic, strong) id <AUAdUnitConfigurationType> _Null_unspecified adUnitConfiguration;
@property (nonatomic, copy) void (^ _Nullable onLoadRequest)(id _Nonnull);
- (void)awakeFromNib;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)setupConfigId:(NSString * _Nonnull)configId;
- (void)collapseBehaviourForView:(UIView * _Nonnull)forView;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUAdViewUtils")
@interface AUAdViewUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)findCreativeSize:(UIView * _Nonnull)adView success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

enum AUApiType : NSInteger;

SWIFT_CLASS_NAMED("AUApi")
@interface AUApi : NSObject
- (nonnull instancetype)initWithApiType:(enum AUApiType)apiType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h1>OpenRTB - API Frameworks</h1>
/// \code
/// | Value | Description |
/// |-------|-------------|
/// | 1     | VPAID 1.0   |
/// | 2     | VPAID 2.0   |
/// | 3     | MRAID-1     |
/// | 4     | ORMMA       |
/// | 5     | MRAID-2     |
/// | 6     | MRAID-3     |
/// | 7     | OMID-1      |
///
/// \endcode
typedef SWIFT_ENUM_NAMED(NSInteger, AUApiType, "AUApiType", closed) {
  AUApiTypeVPAID_1 = 1,
  AUApiTypeVPAID_2 = 2,
  AUApiTypeMRAID_1 = 3,
  AUApiTypeORMMA = 4,
  AUApiTypeMRAID_2 = 5,
  AUApiTypeMRAID_3 = 6,
  AUApiTypeOMID_1 = 7,
};

@class GAMBannerView;

SWIFT_CLASS("_TtC14AudienzziOSSDK20AUBannerEventHandler")
@interface AUBannerEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nonnull)adUnitId gamView:(GAMBannerView * _Nonnull)gamView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BannerParameters..
/// If will be nill. Automatically create default  parameters
/// <h1>Example</h1>
/// <ul>
///   <li>
///     let parameters = BannerParameters()
///   </li>
///   <li>
///     parameters.api = [Signals.Api.MRAID_2]
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14AudienzziOSSDK18AUBannerParameters")
@interface AUBannerParameters : NSObject
/// List of supported API frameworks for this impression. If an API is not explicitly listed, it is assumed not to be supported.
@property (nonatomic, copy) NSArray<AUApi *> * _Nullable api;
@property (nonatomic, copy) NSArray<NSValue *> * _Nullable adSizes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIViewController;
@class AUBannerRenderingView;

SWIFT_PROTOCOL("_TtP14AudienzziOSSDK27AUBannerRenderingAdDelegate_")
@protocol AUBannerRenderingAdDelegate <NSObject>
@optional
/// Called when ad is shoed on display and before load (used for lazy load)
- (void)bannerAdDidDisplayOnScreen;
@required
/// Asks the delegate for a view controller instance to use for presenting modal views
/// as a result of user interaction on an ad. Usual implementation may simply return self,
/// if it is view controller class.
- (UIViewController * _Nullable)bannerViewPresentationController SWIFT_WARN_UNUSED_RESULT;
@optional
- (void)bannerView:(AUBannerRenderingView * _Nonnull)bannerView didReceiveAdWithAdSize:(CGSize)adSize;
- (void)bannerView:(AUBannerRenderingView * _Nonnull)bannerView didFailToReceiveAdWith:(NSError * _Nonnull)error;
- (void)bannerViewWillLeaveApplication:(AUBannerRenderingView * _Nonnull)bannerView;
- (void)bannerViewWillPresentModal:(AUBannerRenderingView * _Nonnull)bannerView;
- (void)bannerViewDidDismissModal:(AUBannerRenderingView * _Nonnull)bannerView;
@end

@class AUVideoParameters;
@class AUGAMBannerEventHandler;

/// AUBannerRenderingView.
/// Ad a view that will display the particular ad. It should be added to the UI.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK21AUBannerRenderingView")
@interface AUBannerRenderingView : AUAdView
@property (nonatomic, weak) id <AUBannerRenderingAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSString * _Nonnull configID;
@property (nonatomic, readonly, strong) AUBannerParameters * _Nonnull bannerParameters;
@property (nonatomic, readonly, strong) AUVideoParameters * _Nonnull videoParameters;
@property (nonatomic) NSTimeInterval refreshInterval;
@property (nonatomic, copy) NSArray<NSValue *> * _Nullable additionalSizes;
@property (nonatomic, strong) AUAdFormat * _Nonnull adFormat;
@property (nonatomic) enum AUAdPosition adPosition;
- (void)setVideoParameters:(AUVideoParameters * _Nonnull)videoParameters;
/// Initialize banner rendering view.
/// Lazy load is true by default. Format is HTML-banner as default
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize format:(AUAdFormat * _Nonnull)format isLazyLoad:(BOOL)isLazyLoad eventHandler:(AUGAMBannerEventHandler * _Nonnull)eventHandler OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
/// If you use VIDEO please use ‘setVideoParameters’ method befrore.
- (void)createAd;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



/// AUBannerView.
/// Ad view for demand  banner and/or video.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK12AUBannerView")
@interface AUBannerView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
@property (nonatomic, strong) AUBannerParameters * _Nullable bannerParameters;
/// Initialize banner view
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats OBJC_DESIGNATED_INITIALIZER;
/// Initialize banner view
/// Lazy load is optional to set if needed.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest gamBanner:(UIView * _Nonnull)gamBanner eventHandler:(AUBannerEventHandler * _Nullable)eventHandler;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM(NSInteger, AUContextSubType, closed) {
  AUContextSubTypeGeneral = 10,
  AUContextSubTypeArticle = 11,
  AUContextSubTypeVideo = 12,
  AUContextSubTypeAudio = 13,
  AUContextSubTypeImage = 14,
  AUContextSubTypeUserGenerated = 15,
  AUContextSubTypeSocial = 20,
  AUContextSubTypeEmail = 21,
  AUContextSubTypeChatIM = 22,
  AUContextSubTypeSellingProduct = 30,
  AUContextSubTypeAppStore = 31,
  AUContextSubTypeReviewSite = 32,
  AUContextSubTypeCustom = 500,
};

typedef SWIFT_ENUM(NSInteger, AUContextType, closed) {
  AUContextTypeContent = 1,
  AUContextTypeSocial = 2,
  AUContextTypeProduct = 3,
  AUContextTypeCustom = 4,
};

typedef SWIFT_ENUM(NSInteger, AUDataAsset, closed) {
  AUDataAssetSponsored = 1,
  AUDataAssetDescription = 2,
  AUDataAssetRating = 3,
  AUDataAssetLikes = 4,
  AUDataAssetDownloads = 5,
  AUDataAssetPrice = 6,
  AUDataAssetSaleprice = 7,
  AUDataAssetPhone = 8,
  AUDataAssetAddress = 9,
  AUDataAssetDescription2 = 10,
  AUDataAssetDisplayurl = 11,
  AUDataAssetCtatext = 12,
  AUDataAssetCustom = 500,
};

enum AUEventTrackingType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK15AUEventTracking")
@interface AUEventTracking : NSObject
- (nonnull instancetype)initWithTrackingType:(enum AUEventTrackingType)trackingType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AUEventTrackingType, closed) {
  AUEventTrackingTypeImage = 1,
  AUEventTrackingTypeJs = 2,
  AUEventTrackingTypeCustom = 500,
};

typedef SWIFT_ENUM(NSInteger, AUEventType, closed) {
  AUEventTypeImpression = 1,
  AUEventTypeViewableImpression50 = 2,
  AUEventTypeViewableImpression100 = 3,
  AUEventTypeViewableVideoImpression50 = 4,
  AUEventTypeCustom = 500,
};

@class NSValue;

/// AUGAMBannerEventHandler.
/// To create the GAMBannerEventHandler you should provide:
/// a GAM Ad Unit Id the list of available sizes for this ad unit.
SWIFT_CLASS("_TtC14AudienzziOSSDK23AUGAMBannerEventHandler")
@interface AUGAMBannerEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID validGADAdSizes:(NSArray<NSValue *> * _Nonnull)validGADAdSizes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK29AUGAMInterstitialEventHandler")
@interface AUGAMInterstitialEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK27AUGAMRewardedAdEventHandler")
@interface AUGAMRewardedAdEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class IMAAdSlotSize;

SWIFT_CLASS("_TtC14AudienzziOSSDK10AUIMAUtils")
@interface AUIMAUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUIMAUtils * _Nonnull shared;)
+ (AUIMAUtils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)generateInstreamUriForGAMWithAdUnitID:(NSString * _Nonnull)adUnitID adSlotSizes:(NSArray<IMAAdSlotSize *> * _Nonnull)adSlotSizes customKeywords:(NSDictionary<NSString *, NSString *> * _Nullable)customKeywords error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, AUImageAsset, closed) {
  AUImageAssetIcon = 1,
  AUImageAssetMain = 3,
  AUImageAssetCustom = 500,
};


/// AUInstreamView.
/// Ad view for demand instream ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK14AUInstreamView")
@interface AUInstreamView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
@property (nonatomic, copy) void (^ _Nullable onLoadInstreamRequest)(NSDictionary<NSString *, NSString *> * _Nullable);
/// Initialize instream view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize OBJC_DESIGNATED_INITIALIZER;
/// Initialize instream view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWithSize:(CGSize)size;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
@end


@class GADInterstitialAd;

SWIFT_CLASS("_TtC14AudienzziOSSDK26AUInterstitialEventHandler")
@interface AUInterstitialEventHandler : NSObject
- (nonnull instancetype)initWithAdUnit:(GADInterstitialAd * _Nonnull)adUnit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AUInterstitialenderingAdDelegate;
enum AURenderingInsterstitialAdFormat : NSInteger;

/// AUInterstitialRenderingView.
/// Ad a view that will display the particular ad. It should be added to the UI.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK27AUInterstitialRenderingView")
@interface AUInterstitialRenderingView : AUAdView
@property (nonatomic, weak) id <AUInterstitialenderingAdDelegate> _Nullable delegate;
@property (nonatomic) double skipButtonArea;
@property (nonatomic) enum AUAdInterstitialPosition skipButtonPosition;
@property (nonatomic) double skipDelay;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad adFormat:(enum AURenderingInsterstitialAdFormat)adFormat minSizePercentage:(NSValue * _Nullable)minSizePercentage eventHandler:(AUGAMInterstitialEventHandler * _Nonnull)eventHandler OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAd;
/// It is expected from the user to call this method on main thread
- (void)showAd:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



/// AUInterstitialView.
/// Ad view for demand Interstitial and/or video.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK18AUInterstitialView")
@interface AUInterstitialView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
/// Initialize Interstitial view
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats OBJC_DESIGNATED_INITIALIZER;
/// Initialize Interstitial view
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Initialize Interstitial view. Convenience variant
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats isLazyLoad:(BOOL)isLazyLoad minWidthPerc:(NSInteger)minWidthPerc minHeightPerc:(NSInteger)minHeightPerc;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest adUnitID:(NSString * _Nonnull)adUnitID;
- (void)connectHandler:(AUInterstitialEventHandler * _Nonnull)eventHandler;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP14AudienzziOSSDK32AUInterstitialenderingAdDelegate_")
@protocol AUInterstitialenderingAdDelegate <NSObject>
@optional
/// Called when ad is shoed on display and before load (used for lazy load)
- (void)interstitialAdDidDisplayOnScreen;
/// Called when an ad is loaded and ready for display
- (void)interstitialDidReceiveAdWith:(NSString * _Nonnull)configId;
/// Called when the load process fails to produce a viable ad
- (void)interstitialDidFailToReceiveAdWithErrorWithError:(NSError * _Nullable)error;
/// Called when the interstitial view will be launched,  as a result of show() method.
- (void)interstitialWillPresentAd;
/// Called when the interstitial is dismissed by the user
- (void)interstitialDidDismissAd;
/// Called when an ad causes the sdk to leave the app
- (void)interstitialWillLeaveApplication;
/// Called when user clicked the ad
- (void)interstitialDidClickAd;
@end

@class NSNumber;
@class AUMORTBContentProducer;

/// Describes an <a href="https://www.iab.com/wp-content/uploads/2016/03/OpenRTB-API-Specification-Version-2-5-FINAL.pdf">OpenRTB</a> app: content object
SWIFT_CLASS("_TtC14AudienzziOSSDK17AUMORTBAppContent")
@interface AUMORTBAppContent : NSObject
/// ID uniquely identifying the content.
@property (nonatomic, copy) NSString * _Nullable id;
/// Episode number.
@property (nonatomic, strong) NSNumber * _Nullable episode;
/// Content title.
@property (nonatomic, copy) NSString * _Nullable title;
/// Content series.
@property (nonatomic, copy) NSString * _Nullable series;
/// Content season.
@property (nonatomic, copy) NSString * _Nullable season;
/// Artist credited with the content.
@property (nonatomic, copy) NSString * _Nullable artist;
/// Genre that best describes the content.
@property (nonatomic, copy) NSString * _Nullable genre;
/// Album to which the content belongs; typically for audio.
@property (nonatomic, copy) NSString * _Nullable album;
/// International Standard Recording Code conforming to ISO- 3901.
@property (nonatomic, copy) NSString * _Nullable isrc;
/// This object defines the producer of the content in which the ad will be shown.
@property (nonatomic, strong) AUMORTBContentProducer * _Nullable producer;
/// URL of the content, for buy-side contextualization or review.
@property (nonatomic, copy) NSString * _Nullable url;
/// Array of IAB content categories that describe the content producer.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable cat;
/// Production quality.
@property (nonatomic, strong) NSNumber * _Nullable prodq;
/// Type of content (game, video, text, etc.).
@property (nonatomic, strong) NSNumber * _Nullable context;
/// Content rating.
@property (nonatomic, copy) NSString * _Nullable contentrating;
/// User rating of the content.
@property (nonatomic, copy) NSString * _Nullable userrating;
/// Media rating per IQG guidelines.
@property (nonatomic, strong) NSNumber * _Nullable qagmediarating;
/// Comma separated list of keywords describing the content.
@property (nonatomic, copy) NSString * _Nullable keywords;
/// 0 = not live, 1 = content is live.
@property (nonatomic, strong) NSNumber * _Nullable livestream;
/// 0 = indirect, 1 = direct.
@property (nonatomic, strong) NSNumber * _Nullable sourcerelationship;
/// Length of content in seconds; appropriate for video or audio.
@property (nonatomic, strong) NSNumber * _Nullable len;
/// Content language using ISO-639-1-alpha-2.
@property (nonatomic, copy) NSString * _Nullable language;
/// Indicator of whether or not the content is embeddable (e.g., an embeddable video player), where 0 = no, 1 = yes.
@property (nonatomic, strong) NSNumber * _Nullable embeddable;
/// The data and segment objects together allow additional data about the related object (e.g., user, content) to be specified.
@property (nonatomic, copy) NSArray<AUMORTBContentData *> * _Nullable data;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class AUMORTBContentSegment;

SWIFT_CLASS("_TtC14AudienzziOSSDK18AUMORTBContentData")
@interface AUMORTBContentData : NSObject
/// Exchange-specific ID for the data provider.
@property (nonatomic, copy) NSString * _Nullable id;
/// Exchange-specific name for the data provider.
@property (nonatomic, copy) NSString * _Nullable name;
/// Segment objects are essentially key-value pairs that convey specific units of data.
@property (nonatomic, copy) NSArray<AUMORTBContentSegment *> * _Nullable segment;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14AudienzziOSSDK22AUMORTBContentProducer")
@interface AUMORTBContentProducer : NSObject
/// Content producer or originator ID.
@property (nonatomic, copy) NSString * _Nullable id;
/// Content producer or originator name
@property (nonatomic, copy) NSString * _Nullable name;
/// Array of IAB content categories that describe the content producer.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable cat;
/// Highest level domain of the content producer.
@property (nonatomic, copy) NSString * _Nullable domain;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14AudienzziOSSDK21AUMORTBContentSegment")
@interface AUMORTBContentSegment : NSObject
/// ID of the data segment specific to the data provider.
@property (nonatomic, copy) NSString * _Nullable id;
/// Name of the data segment specific to the data provider.
@property (nonatomic, copy) NSString * _Nullable name;
/// String representation of the data segment value.
@property (nonatomic, copy) NSString * _Nullable value;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol AUNativeAdDelegate;
@class NativeAd;

/// AUMultiplatformView.
/// Ad view for demand combinations of ad type. It allows to run bid requests with any combination of banner, video, and native formats.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK19AUMultiplatformView")
@interface AUMultiplatformView : AUAdView
@property (nonatomic, weak) id <AUNativeAdDelegate> _Nullable delegate;
@property (nonatomic, copy) void (^ _Nullable onGetNativeAd)(NativeAd * _Nonnull);
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createWith:(id _Nonnull)gamRequest;
- (void)findNativeWithAdObject:(id _Nonnull)adObject;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


@class AUNativeAdMarkup;
@protocol AUNativeAdEventDelegate;
@class AUNativeTitle;
@class AUNativeData;
@class AUNativeImage;
@class AUNativeEventTrackerResponse;
enum AUNativeDataAssetType : NSInteger;
enum AUNativeImageAssetType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK10AUNativeAd")
@interface AUNativeAd : NSObject
@property (nonatomic, readonly, strong) AUNativeAdMarkup * _Nullable nativeAdMarkup;
@property (nonatomic, weak) id <AUNativeAdEventDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<AUNativeTitle *> * _Nonnull titles;
@property (nonatomic, readonly, copy) NSArray<AUNativeData *> * _Nonnull dataObjects;
@property (nonatomic, readonly, copy) NSArray<AUNativeImage *> * _Nonnull images;
@property (nonatomic, readonly, copy) NSArray<AUNativeEventTrackerResponse *> * _Nullable eventTrackers;
- (NSArray<AUNativeData *> * _Nonnull)dataObjectsOf:(enum AUNativeDataAssetType)dataType SWIFT_WARN_UNUSED_RESULT;
- (NSArray<AUNativeImage *> * _Nonnull)imagesOf:(enum AUNativeImageAssetType)imageType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable sponsoredBy;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable callToAction;
- (BOOL)registerViewWithView:(UIView * _Nullable)view clickableViews:(NSArray<UIView *> * _Nullable)clickableViews;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK18AUNativeAdDelegate_")
@protocol AUNativeAdDelegate
/// Native was not found in the server returned response,
/// Please display the ad as regular ways
- (void)nativeAdNotFound;
/// Native ad was returned, however, the bid is not valid for displaying
/// Should be treated as on ad load failed
- (void)nativeAdNotValid;
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK23AUNativeAdEventDelegate_")
@protocol AUNativeAdEventDelegate
@optional
/// Sent when the native ad is expired.
- (void)adDidExpireWithAd:(AUNativeAd * _Nonnull)ad;
/// Sent when the native view is clicked by the user.
- (void)adWasClickedWithAd:(AUNativeAd * _Nonnull)ad;
/// Sent when  an impression is recorded for an native ad
- (void)adDidLogImpressionWithAd:(AUNativeAd * _Nonnull)ad;
@end

@class AUNativeAdMarkupAsset;
@class AUNativeLink;

SWIFT_CLASS("_TtC14AudienzziOSSDK16AUNativeAdMarkup")
@interface AUNativeAdMarkup : NSObject
/// Version of the Native Markup version in use.
@property (nonatomic, copy) NSString * _Nullable version;
/// List of native ad’s assets.
/// Required if no assetsurl.
/// Recommended as fallback even if assetsurl is provided.
@property (nonatomic, copy) NSArray<AUNativeAdMarkupAsset *> * _Nullable assets;
/// URL of an alternate source for the assets object.
/// The expected response is a JSON object mirroring the assets object in the bid response,
/// subject to certain requirements as specified in the individual objects.
/// Where present, overrides the asset object in the response.
@property (nonatomic, copy) NSString * _Nullable assetsurl;
/// URL where a dynamic creative specification may be found for populating this ad, per the Dynamic Content Ads Specification.
/// Note this is a beta option as the interpretation of the Dynamic Content Ads Specification and how to assign those elements
/// into a native ad is outside the scope of this spec and must be agreed offline between the parties
/// or as may be specified in a future revision of the Dynamic Content Ads spec.
/// Where present, overrides the asset object in the response.
@property (nonatomic, copy) NSString * _Nullable dcourl;
/// Destination Link.
/// This is default link object for the ad.
/// Individual assets can also have a link object which applies if the asset is activated(clicked).
/// If the asset doesn’t have a link object, the parent link object applies.
/// See LinkObject Definition
@property (nonatomic, strong) AUNativeLink * _Nullable link;
/// Array of impression tracking URLs, expected to return a 1x1 image or 204 response - typically only passed when using 3rd party trackers.
/// To be deprecated - replaced with eventtrackers.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable imptrackers;
/// Optional JavaScript impression tracker.
/// This is a valid HTML, Javascript is already wrapped in <script> tags.
/// It should be executed at impression time where it can be supported.
/// To be deprecated - replaced with eventtrackers.
@property (nonatomic, copy) NSString * _Nullable jstracker;
/// Array of tracking objects to run with the ad, in response to the declared supported methods in the request.
/// Replaces imptrackers and jstracker, to be deprecated.
@property (nonatomic, copy) NSArray<AUNativeEventTrackerResponse *> * _Nullable eventtrackers;
/// If support was indicated in the request, URL of a page informing the user about the buyer’s targeting activity.
@property (nonatomic, copy) NSString * _Nullable privacy;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK21AUNativeAdMarkupAsset")
@interface AUNativeAdMarkupAsset : NSObject
/// Title object for title assets.
/// See TitleObject definition.
@property (nonatomic, strong) AUNativeTitle * _Nullable title;
/// Image object for image assets.
/// See ImageObject definition.
@property (nonatomic, strong) AUNativeImage * _Nullable img;
/// Data object for ratings, prices etc.
@property (nonatomic, strong) AUNativeData * _Nullable data;
/// Link object for call to actions.
/// The link object applies if the asset item is activated (clicked).
/// If there is no link object on the asset, the parent link object on the bid response applies.
@property (nonatomic, strong) AUNativeLink * _Nullable link;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUNativeAsset")
@interface AUNativeAsset : NSObject
@property (nonatomic) BOOL required;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK17AUNativeAssetData")
@interface AUNativeAssetData : AUNativeAsset
@property (nonatomic, strong) id _Nullable ext;
- (nonnull instancetype)initWithType:(enum AUDataAsset)type required:(BOOL)required OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK18AUNativeAssetImage")
@interface AUNativeAssetImage : AUNativeAsset
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mimes;
@property (nonatomic, strong) id _Nullable ext;
- (nonnull instancetype)initWithMinimumWidth:(NSInteger)minimumWidth minimumHeight:(NSInteger)minimumHeight required:(BOOL)required;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK18AUNativeAssetTitle")
@interface AUNativeAssetTitle : AUNativeAsset
@property (nonatomic, strong) id _Nullable ext;
- (nonnull instancetype)initWithLength:(NSInteger)length required:(BOOL)required OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired SWIFT_UNAVAILABLE;
@end


/// AUNativeBannerView.
/// Ad view for demand native banner.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK18AUNativeBannerView")
@interface AUNativeBannerView : AUAdView
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC14AudienzziOSSDK12AUNativeData")
@interface AUNativeData : NSObject
/// The formatted string of data to be displayed.
/// Can contain a formatted value such as “5 stars” or “$10” or “3.4 stars out of 5”.
@property (nonatomic, copy) NSString * _Nullable value;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AUNativeDataAssetType, closed) {
  AUNativeDataAssetTypeUndefined = 0,
  AUNativeDataAssetTypeSponsored = 1,
/// Sponsored By message where response should contain the brand name of the sponsor.
  AUNativeDataAssetTypeDesc = 2,
/// Descriptive text associated with the product or service being advertised. Longer length of text in response may be truncated or ellipsed by the exchange.
  AUNativeDataAssetTypeRating = 3,
/// Rating of the product being offered to the user. For example an app’s rating in an app store from 0-5.
  AUNativeDataAssetTypeLikes = 4,
/// Number of social ratings or “likes” of the product being offered to the user.
  AUNativeDataAssetTypeDownloads = 5,
/// Number downloads/installs of this product
  AUNativeDataAssetTypePrice = 6,
/// Price for product / app / in-app purchase. Value should include currency symbol in localised format.
  AUNativeDataAssetTypeSalePrice = 7,
/// Sale price that can be used together with price to indicate a discounted price compared to a regular price. Value should include currency symbol in localised format.
  AUNativeDataAssetTypePhone = 8,
/// Phone number
  AUNativeDataAssetTypeAddress = 9,
/// Address
  AUNativeDataAssetTypeDesc2 = 10,
/// Additional descriptive text associated text with the product or service being advertised
  AUNativeDataAssetTypeDisplayURL = 11,
/// Display URL for the text ad. To be used when sponsoring entity doesn’t own the content. IE sponsored by BRAND on SITE (where SITE is transmitted in this field).
  AUNativeDataAssetTypeCtaText = 12,
/// CTA description - descriptive text describing a ‘call to action’ button for the destination URL.
  AUNativeDataAssetTypeCustom = 500,
};


SWIFT_CLASS("_TtC14AudienzziOSSDK20AUNativeEventTracker")
@interface AUNativeEventTracker : NSObject
- (nonnull instancetype)initWithEvent:(enum AUEventType)event methods:(NSArray<AUEventTracking *> * _Nonnull)methods OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK28AUNativeEventTrackerResponse")
@interface AUNativeEventTrackerResponse : NSObject
/// The URL of the image or js.
/// Required for image or js, optional for custom.
@property (nonatomic, copy) NSString * _Nullable url;
/// To be agreed individually with the exchange, an array of key:value objects for custom tracking,
/// for example the account number of the DSP with a tracking company. IE {“accountnumber”:”123”}.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable customdata;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUNativeImage")
@interface AUNativeImage : NSObject
/// URL of the image asset.
@property (nonatomic, copy) NSString * _Nullable url;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AUNativeImageAssetType, closed) {
  AUNativeImageAssetTypeIcon = 1,
  AUNativeImageAssetTypeMain = 3,
  AUNativeImageAssetTypeCustom = 500,
};


SWIFT_CLASS("_TtC14AudienzziOSSDK12AUNativeLink")
@interface AUNativeLink : NSObject
/// Landing URL of the clickable link.
@property (nonatomic, copy) NSString * _Nullable url;
/// List of third-party tracker URLs to be fired on click of the URL.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable clicktrackers;
/// Fallback URL for deeplink.
/// To be used if the URL given in url is not supported by the device.
@property (nonatomic, copy) NSString * _Nullable fallback;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUNativeTitle")
@interface AUNativeTitle : NSObject
/// The text associated with the text element.
@property (nonatomic, copy) NSString * _Nullable text;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AUNativeType, closed) {
  AUNativeTypeOrigin = 0,
  AUNativeTypeRendering = 1,
};


/// AUNativeView.
/// Ad view for demand  Native ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK12AUNativeView")
@interface AUNativeView : AUAdView
@property (nonatomic, copy) void (^ _Nullable onNativeLoadRequest)(id _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onGetNativeAd)(AUNativeAd * _Nonnull);
@property (nonatomic, weak) id <AUNativeAdDelegate> _Nullable delegate;
/// Initialize native style view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adType:(enum AUNativeType)adType OBJC_DESIGNATED_INITIALIZER;
/// Initialize native style view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad adType:(enum AUNativeType)adType OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest;
- (void)findNativeWithAdObject:(id _Nonnull)adObject;
- (BOOL)registerViewWithClickableViews:(NSArray<UIView *> * _Nullable)clickableViews;
- (void)findRenderingAd:(AUNativeAd * _Nullable)ad;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


/// <h1>OpenRTB - Video Placement Types</h1>
/// \code
/// | Value | Description                  |
/// |-------|------------------------------|
/// | 1     | In-Stream                    |
/// | 2     | In-Banner                    |
/// | 3     | In-Article                   |
/// | 4     | In-Feed                      |
/// | 5     | Interstitial/Slider/Floating |
///
/// \endcode
typedef SWIFT_ENUM_NAMED(NSInteger, AUPlacement, "AUPlacement", closed) {
  AUPlacementInStream = 0,
  AUPlacementInBanner = 1,
  AUPlacementInArticle = 2,
  AUPlacementInFeed = 3,
  AUPlacementInterstitial = 4,
};

typedef SWIFT_ENUM(NSInteger, AUPlacementType, closed) {
  AUPlacementTypeFeedContent = 1,
  AUPlacementTypeAtomicContent = 2,
  AUPlacementTypeOutsideContent = 3,
  AUPlacementTypeRecommendationWidget = 4,
  AUPlacementTypeCustom = 500,
};

typedef SWIFT_ENUM(NSInteger, AURenderingInsterstitialAdFormat, closed) {
  AURenderingInsterstitialAdFormatBanner = 0,
  AURenderingInsterstitialAdFormatVideo = 1,
};

typedef SWIFT_ENUM(NSInteger, AUResultCode, closed) {
  AUResultCodeAudienzzDemandFetchSuccess = 0,
  AUResultCodeAudienzzServerNotSpecified = 1,
  AUResultCodeAudienzzInvalidAccountId = 2,
  AUResultCodeAudienzzInvalidConfigId = 3,
  AUResultCodeAudienzzInvalidSize = 4,
  AUResultCodeAudienzzNetworkError = 5,
  AUResultCodeAudienzzServerError = 6,
  AUResultCodeAudienzzDemandNoBids = 7,
  AUResultCodeAudienzzDemandTimedOut = 8,
  AUResultCodeAudienzzServerURLInvalid = 9,
  AUResultCodeAudienzzUnknownError = 10,
  AUResultCodeAudienzzInvalidResponseStructure = 1000,
  AUResultCodeAudienzzInternalSDKError = 7000,
  AUResultCodeAudienzzWrongArguments = 7001,
  AUResultCodeAudienzzNoVastTagInMediaData = 7002,
  AUResultCodeAudienzzSDKMisuse = 8000,
  AUResultCodeAudienzzSDKMisusePreviousFetchNotCompletedYet = 8001,
  AUResultCodeAudienzzInvalidRequest = 8002,
};


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK24AURewardedAdUnitDelegate_")
@protocol AURewardedAdUnitDelegate <NSObject>
@optional
/// Called when ad is shoed on display and before load (used for lazy load)
- (void)rewardedAdDidDisplayOnScreen;
/// Called when an ad is loaded and ready for display
- (void)rewardedAdDidReceiveAd;
/// Called when user is able to receive a reward from the app
- (void)rewardedAdUserDidEarnReward:(NSObject * _Nullable)reward;
/// Called when the load process fails to produce a viable ad
- (void)rewardedAdDidFailToReceiveAdWithError:(NSError * _Nullable)error;
/// Called when the interstitial view will be launched,  as a result of show() method.
- (void)rewardedAdWillPresentAd;
/// Called when the interstial is dismissed by the user
- (void)rewardedAdDidDismissAd;
/// Called when an ad causes the sdk to leave the app
- (void)rewardedAdWillLeaveApplication;
/// Called when user clicked the ad
- (void)rewardedAdDidClickAd;
@end

@class GADRewardedAd;

SWIFT_CLASS("_TtC14AudienzziOSSDK22AURewardedEventHandler")
@interface AURewardedEventHandler : NSObject
- (nonnull instancetype)initWithAdUnit:(GADRewardedAd * _Nonnull)adUnit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AUInstreamView.
/// Ad view for demand instream ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK23AURewardedRenderingView")
@interface AURewardedRenderingView : AUAdView
@property (nonatomic, weak) id <AURewardedAdUnitDelegate> _Nullable delegate;
/// Initialize rewarded view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad minSizePercentage:(NSValue * _Nullable)minSizePercentage eventHandler:(AUGAMRewardedAdEventHandler * _Nonnull)eventHandler OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAd;
/// It is expected from the user to call this method on main thread
- (void)showAd:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



/// AURewardedView.
/// Ad view for demand  Rewarded ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK14AURewardedView")
@interface AURewardedView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
/// Initialize rewarded view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId OBJC_DESIGNATED_INITIALIZER;
/// Initialize rewarded view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest adUnitID:(NSString * _Nonnull)adUnitID;
- (void)connectHandler:(AURewardedEventHandler * _Nonnull)eventHandler;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


@class AUVideoPlaybackMethod;
@class AUVideoProtocols;
enum AUVideoStartDelay : NSInteger;

/// VideoParameters..
/// If will be nill. Automatically create default video parameters
/// <h1>Example</h1>
/// <ul>
///   <li>
///     AUVideoParameters(mimes: [“video/mp4”])
///   </li>
///   <li>
///     protocols = [AdVideoParameters.Protocols.VAST_2_0]
///   </li>
///   <li>
///     playbackMethod = [AdVideoParameters.PlaybackMethod.AutoPlaySoundOff]
///   </li>
///   <li>
///     placement = AdVideoParameters.Placement.InBanner
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14AudienzziOSSDK17AUVideoParameters")
@interface AUVideoParameters : NSObject
/// List of supported API frameworks for this impression. If an API is not explicitly listed, it is assumed not to be supported.
@property (nonatomic, copy) NSArray<AUApi *> * _Nullable api;
/// Content MIME types supported.
/// Prebid Server required property.
/// <h1>Example</h1>
/// <ul>
///   <li>
///     “video/mp4”
///   </li>
///   <li>
///     “video/x-ms-wmv”
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull mimes;
/// Allowed playback methods. If none specified, assume all are allowed.
@property (nonatomic, copy) NSArray<AUVideoPlaybackMethod *> * _Nullable playbackMethod;
/// Array of supported video bid response protocols.
@property (nonatomic, copy) NSArray<AUVideoProtocols *> * _Nullable protocols;
/// \param mimes supported MIME types
///
- (nonnull instancetype)initWithMimes:(NSArray<NSString *> * _Nonnull)mimes OBJC_DESIGNATED_INITIALIZER;
- (void)setSize:(NSValue * _Nonnull)size;
/// Indicates if the impression must be linear, nonlinear, etc. If none specified, assume all are allowed.
- (void)setLinearity:(NSNumber * _Nonnull)linearity;
/// Maximum bit rate in Kbps.
- (void)setMaxBitrate:(NSNumber * _Nonnull)value;
/// Minimum bit rate in Kbps.
- (void)setMinBitrate:(NSNumber * _Nonnull)value;
/// Maximum video ad duration in seconds.
- (void)setMaxDuration:(NSNumber * _Nonnull)value;
/// Minimum video ad duration in seconds.
- (void)setMinDuration:(NSNumber * _Nonnull)value;
/// Indicates the start delay in seconds for pre-roll, mid-roll, or post-roll ad placements.
- (void)setStartDelay:(enum AUVideoStartDelay)value;
/// Placement type for the impression.
- (void)setPlacement:(enum AUPlacement)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum AUVideoPlaybackMethodType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK21AUVideoPlaybackMethod")
@interface AUVideoPlaybackMethod : NSObject
- (nonnull instancetype)initWithType:(enum AUVideoPlaybackMethodType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h1>OpenRTB - Playback Methods</h1>
/// \code
/// | Value | Description                                              |
/// |-------|----------------------------------------------------------|
/// | 1     | Initiates on Page Load with Sound On                     |
/// | 2     | Initiates on Page Load with Sound Off by Default         |
/// | 3     | Initiates on Click with Sound On                         |
/// | 4     | Initiates on Mouse-Over with Sound On                    |
/// | 5     | Initiates on Entering Viewport with Sound On             |
/// | 6     | Initiates on Entering Viewport with Sound Off by Default |
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, AUVideoPlaybackMethodType, closed) {
  AUVideoPlaybackMethodTypeAutoPlaySoundOn = 1,
  AUVideoPlaybackMethodTypeAutoPlaySoundOff = 2,
  AUVideoPlaybackMethodTypeClickToPlay = 3,
  AUVideoPlaybackMethodTypeMouseOver = 4,
  AUVideoPlaybackMethodTypeEnterSoundOn = 5,
  AUVideoPlaybackMethodTypeEnterSoundOff = 6,
};

enum AUVideoProtocolsType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK16AUVideoProtocols")
@interface AUVideoProtocols : NSObject
- (nonnull instancetype)initWithType:(enum AUVideoProtocolsType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h1>OpenRTB - Protocols</h1>
/// \code
/// | Value | Description       |
/// |-------|-------------------|
/// | 1     | VAST 1.0          |
/// | 2     | VAST 2.0          |
/// | 3     | VAST 3.0          |
/// | 4     | VAST 1.0 Wrapper  |
/// | 5     | VAST 2.0 Wrapper  |
/// | 6     | VAST 3.0 Wrapper  |
/// | 7     | VAST 4.0          |
/// | 8     | VAST 4.0 Wrapper  |
/// | 9     | DAAST 1.0         |
/// | 10    | DAAST 1.0 Wrapper |
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, AUVideoProtocolsType, closed) {
  AUVideoProtocolsTypeVAST_1_0 = 1,
  AUVideoProtocolsTypeVAST_2_0 = 2,
  AUVideoProtocolsTypeVAST_3_0 = 3,
  AUVideoProtocolsTypeVAST_1_0_Wrapped = 4,
  AUVideoProtocolsTypeVAST_2_0_Wrapped = 5,
  AUVideoProtocolsTypeVAST_3_0_Wrapped = 6,
  AUVideoProtocolsTypeVAST_4_0 = 7,
  AUVideoProtocolsTypeVAST_4_0_Wrapped = 8,
  AUVideoProtocolsTypeDAAST_1_0 = 9,
  AUVideoProtocolsTypeDAAST_1_0_Wrapped = 10,
};

/// <h1>OpenRTB - Start Delay</h1>
/// \code
/// | Value | Description                                      |
/// |-------|--------------------------------------------------|
/// | > 0   | Mid-Roll (value indicates start delay in second) |
/// | 0     | Pre-Roll                                         |
/// | -1    | Generic Mid-Roll                                 |
/// | -2    | Generic Post-Roll                                |
///
/// \endcode
typedef SWIFT_ENUM_NAMED(NSInteger, AUVideoStartDelay, "AUVideoStartDelay", closed) {
  AUVideoStartDelayPreRoll = 0,
  AUVideoStartDelayGenericMidRoll = -1,
  AUVideoStartDelayGenericPostRoll = -2,
};


SWIFT_CLASS("_TtC14AudienzziOSSDK8Audienzz")
@interface Audienzz : NSObject
@property (nonatomic) BOOL timeoutUpdated;
@property (nonatomic, copy) NSString * _Nonnull audienzServerAccountId;
@property (nonatomic) BOOL pbsDebug;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customHeaders;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull storedBidResponses;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Audienzz * _Nonnull shared;)
+ (Audienzz * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)configureSDKWithAudienzzKey:(NSString * _Nonnull)audienzzKey;
- (void)configureSDKWithAudienzzKey:(NSString * _Nonnull)audienzzKey gadMobileAdsVersion:(NSString * _Nullable)gadMobileAdsVersion;
/// Use this function only to make RN bridging initialize
- (void)configureSDK_RNWithAudienzzKey:(NSString * _Nonnull)audienzzKey :(void (^ _Nullable)(void))completion;
/// Use this function only to make RN bridging initialize
- (void)configureSDK_RNWithAudienzzKey:(NSString * _Nonnull)audienzzKey gadMobileAdsVersion:(NSString * _Nullable)gadMobileAdsVersion :(void (^ _Nullable)(void))completion;
@property (nonatomic) NSInteger timeoutMillis;
@property (nonatomic, strong) NSNumber * _Nullable timeoutMillisDynamic;
@property (nonatomic, copy) NSString * _Nullable storedAuctionResponse;
- (void)addStoredBidResponseWithBidder:(NSString * _Nonnull)bidder responseId:(NSString * _Nonnull)responseId;
- (void)clearStoredBidResponses;
- (NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable)getStoredBidResponses SWIFT_WARN_UNUSED_RESULT;
- (void)addCustomHeaderWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
- (void)clearCustomHeaders;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GAMRequest;

SWIFT_CLASS("_TtC14AudienzziOSSDK16AudienzzGAMUtils")
@interface AudienzzGAMUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudienzzGAMUtils * _Nonnull shared;)
+ (AudienzzGAMUtils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (void)initializeGAM;
- (void)prepareRequest:(GAMRequest * _Nonnull)request bidTargeting:(NSDictionary<NSString *, NSString *> * _Nonnull)bidTargeting;
@end

@class GADNativeAd;
@class NSError;
@class GADCustomNativeAd;

@interface AudienzzGAMUtils (SWIFT_EXTENSION(AudienzziOSSDK))
- (void)findNativeAdObjcFor:(GADNativeAd * _Nonnull)nativeAd completion:(void (^ _Nonnull)(NativeAd * _Nullable, NSError * _Nullable))completion;
- (void)findCustomNativeAdFor:(GADCustomNativeAd * _Nonnull)nativeAd completion:(void (^ _Nonnull)(AUNativeAd * _Nullable, NSError * _Nullable))completion;
- (void)findCustomNativeAdObjcFor:(GADCustomNativeAd * _Nonnull)nativeAd completion:(void (^ _Nonnull)(NativeAd * _Nullable, NSError * _Nullable))completion;
@end








#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef AUDIENZZIOSSDK_SWIFT_H
#define AUDIENZZIOSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AudienzziOSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// The Data object is free form data (also known as First Party Data) supplied by the publisher to provide additional targeting of the user or inventory context, used primarily for striking PMP (Private MarketPlace) deals with Advertisers. Data supplied in the data parameters are typically not sent to DSPs whereas information sent in non-data objects (i.e. setYearOfBirth, setGender, etc.) will be. Access to FPD can be limited to a supplied set of Prebid bidders via an access control list.
/// Data is broken up into two different data types:
/// User
/// Global in scope only
/// Inventory (context)
/// Global scope
/// Ad Unit grain
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK39AUADunitConfigurationDataObjectProtocol_")
@protocol AUADunitConfigurationDataObjectProtocol
/// This method obtains the ext data keyword & value for adunit targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addExtDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the ext data keyword & values for adunit targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateExtDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific ext data keyword & values set from adunit targeting
- (void)removeExtDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all ext data set from adunit targeting
- (void)clearExtData;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK10AUAdFormat")
@interface AUAdFormat : NSObject
@property (nonatomic, readonly) NSInteger rawValue;
@property (nonatomic, readonly, copy) NSString * _Nullable stringEquivalent;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue stringEquivalent:(NSString * _Nonnull)stringEquivalent;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUAdFormat * _Nonnull banner;)
+ (AUAdFormat * _Nonnull)banner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUAdFormat * _Nonnull video;)
+ (AUAdFormat * _Nonnull)video SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUAdFormat * _Nonnull native;)
+ (AUAdFormat * _Nonnull)native SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AUAdFormat *> * _Nonnull allCases;)
+ (NSArray<AUAdFormat *> * _Nonnull)allCases SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, AUAdInterstitialPosition, "AUAdInterstitialPosition", closed) {
  AUAdInterstitialPositionUndefined = -1,
  AUAdInterstitialPositionTopLeft = 0,
  AUAdInterstitialPositionTopCenter = 1,
  AUAdInterstitialPositionTopRight = 2,
  AUAdInterstitialPositionCenter = 3,
  AUAdInterstitialPositionBottomLeft = 4,
  AUAdInterstitialPositionBottomCenter = 5,
  AUAdInterstitialPositionBottomRight = 6,
  AUAdInterstitialPositionCustom = 7,
};

/// <ul>
///   <li>
///     Ad position on screen. Refer to List 5.4:
///   </li>
///   <li>
///     The following table specifies the position of the ad as a relative measure of visibility or prominence. This
///   </li>
///   <li>
///     OpenRTB table has values derived from the Inventory Quality Guidelines (IQG). Practitioners should
///   </li>
///   <li>
///     keep in sync with updates to the IQG values as published on IAB.com. Values “4” - “7” apply to apps per
///   </li>
///   <li>
///     the mobile addendum to IQG version 2.1.
///   </li>
///   <li>
///     Value Description
///   </li>
///   <li>
///     0 Unknown
///   </li>
///   <li>
///     1 Above the Fold
///   </li>
///   <li>
///     2 DEPRECATED - May or may not be initially visible depending on screen size/resolution.
///   </li>
///   <li>
///     3 Below the Fold
///   </li>
///   <li>
///     4 Header
///   </li>
///   <li>
///     5 Footer
///   </li>
///   <li>
///     6 Sidebar
///   </li>
///   <li>
///     7 Full Screen
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, AUAdPosition, "AUAdPosition", closed) {
  AUAdPositionUndefined = 0,
  AUAdPositionHeader = 4,
  AUAdPositionFooter = 5,
  AUAdPositionSidebar = 6,
  AUAdPositionFullScreen = 7,
};

@class AUMORTBAppContent;
@class AUMORTBContentData;

/// The ContentObject allows you to provide more details about content within the app. All properties provided to the ContentObject will be sent in the app.content field of the bid request
/// Using the following methods you can add app.content.data objects to the bid requests.
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK39AUAdUnitConfigurationAppContentProtocol_")
@protocol AUAdUnitConfigurationAppContentProtocol
- (void)setAppContent:(AUMORTBAppContent * _Nonnull)appContentObject;
- (AUMORTBAppContent * _Nullable)getAppContent SWIFT_WARN_UNUSED_RESULT;
- (void)clearAppContent;
- (void)addAppContentData:(NSArray<AUMORTBContentData *> * _Nonnull)dataObjects;
- (void)removeAppContentData:(AUMORTBContentData * _Nonnull)dataObject;
- (void)clearAppContentData;
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK40AUAdUnitConfigurationAutorefreshProtocol_")
@protocol AUAdUnitConfigurationAutorefreshProtocol
/// This method allows to set the auto refresh period for the demand
/// \param time refresh time interval
///
- (void)setAutoRefreshMillisWithTime:(double)time;
/// This method stops the auto refresh of demand
- (void)stopAutoRefresh;
/// This method resume the auto refresh
- (void)resumeAutoRefresh;
@end


/// Ad Unit context keywords object is a free form list of comma separated keywords about the app as defined in app.keyword in OpenRTB 2.5. The addContextKeyword function adds a single keyword to the ad unit.
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK43AUAdUnitConfigurationContextKeywordProtocol_")
@protocol AUAdUnitConfigurationContextKeywordProtocol
/// This method obtains the keyword for adunit targeting
/// Inserts the given element in the set if it is not already present.
- (void)addExtKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the keyword set for adunit targeting
/// Adds the elements of the given set to the set.
- (void)addExtKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific keyword from adunit targeting
- (void)removeExtKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of adunit targeting
- (void)clearExtKeywords;
@end


/// Using the following method, you can set the impression-level GPID value to the bid request:
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK33AUAdUnitConfigurationGRIPProtocol_")
@protocol AUAdUnitConfigurationGRIPProtocol
- (void)setGPID:(NSString * _Nullable)gpid;
- (NSString * _Nullable)getGPID SWIFT_WARN_UNUSED_RESULT;
@end


/// Ad Slot is an identifier tied to the placement the ad will be delivered in
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK33AUAdUnitConfigurationSlotProtocol_")
@protocol AUAdUnitConfigurationSlotProtocol
@property (nonatomic, copy) NSString * _Nullable adSlot;
@end


/// Using the following methods you can add user.data objects to the bid requests.
SWIFT_PROTOCOL("_TtP14AudienzziOSSDK37AUAdUnitConfigurationUserDataProtocol_")
@protocol AUAdUnitConfigurationUserDataProtocol
- (NSArray<AUMORTBContentData *> * _Nullable)getUserData SWIFT_WARN_UNUSED_RESULT;
- (void)addUserData:(NSArray<AUMORTBContentData *> * _Nonnull)userDataObjects;
- (void)removeUserData:(AUMORTBContentData * _Nonnull)userDataObject;
- (void)clearUserData;
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK25AUAdUnitConfigurationType_")
@protocol AUAdUnitConfigurationType <AUADunitConfigurationDataObjectProtocol, AUAdUnitConfigurationAppContentProtocol, AUAdUnitConfigurationAutorefreshProtocol, AUAdUnitConfigurationContextKeywordProtocol, AUAdUnitConfigurationGRIPProtocol, AUAdUnitConfigurationSlotProtocol, AUAdUnitConfigurationUserDataProtocol>
@end


@class NSCoder;

SWIFT_CLASS("_TtC14AudienzziOSSDK11VisibleView")
@interface VisibleView : UIView
+ (void)awakeFromNib;
- (void)didMoveToWindow;
- (void)removeFromSuperview;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK8AUAdView")
@interface AUAdView : VisibleView
@property (nonatomic, strong) id <AUAdUnitConfigurationType> _Null_unspecified adUnitConfiguration;
@property (nonatomic, copy) void (^ _Nullable onLoadRequest)(id _Nonnull);
- (void)awakeFromNib;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)setupConfigId:(NSString * _Nonnull)configId;
- (void)collapseBehaviourForView:(UIView * _Nonnull)forView;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUAdViewUtils")
@interface AUAdViewUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)findCreativeSize:(UIView * _Nonnull)adView success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end

enum AUApiType : NSInteger;

SWIFT_CLASS_NAMED("AUApi")
@interface AUApi : NSObject
- (nonnull instancetype)initWithApiType:(enum AUApiType)apiType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h1>OpenRTB - API Frameworks</h1>
/// \code
/// | Value | Description |
/// |-------|-------------|
/// | 1     | VPAID 1.0   |
/// | 2     | VPAID 2.0   |
/// | 3     | MRAID-1     |
/// | 4     | ORMMA       |
/// | 5     | MRAID-2     |
/// | 6     | MRAID-3     |
/// | 7     | OMID-1      |
///
/// \endcode
typedef SWIFT_ENUM_NAMED(NSInteger, AUApiType, "AUApiType", closed) {
  AUApiTypeVPAID_1 = 1,
  AUApiTypeVPAID_2 = 2,
  AUApiTypeMRAID_1 = 3,
  AUApiTypeORMMA = 4,
  AUApiTypeMRAID_2 = 5,
  AUApiTypeMRAID_3 = 6,
  AUApiTypeOMID_1 = 7,
};

@class GAMBannerView;

SWIFT_CLASS("_TtC14AudienzziOSSDK20AUBannerEventHandler")
@interface AUBannerEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nonnull)adUnitId gamView:(GAMBannerView * _Nonnull)gamView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BannerParameters..
/// If will be nill. Automatically create default  parameters
/// <h1>Example</h1>
/// <ul>
///   <li>
///     let parameters = BannerParameters()
///   </li>
///   <li>
///     parameters.api = [Signals.Api.MRAID_2]
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14AudienzziOSSDK18AUBannerParameters")
@interface AUBannerParameters : NSObject
/// List of supported API frameworks for this impression. If an API is not explicitly listed, it is assumed not to be supported.
@property (nonatomic, copy) NSArray<AUApi *> * _Nullable api;
@property (nonatomic, copy) NSArray<NSValue *> * _Nullable adSizes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIViewController;
@class AUBannerRenderingView;

SWIFT_PROTOCOL("_TtP14AudienzziOSSDK27AUBannerRenderingAdDelegate_")
@protocol AUBannerRenderingAdDelegate <NSObject>
@optional
/// Called when ad is shoed on display and before load (used for lazy load)
- (void)bannerAdDidDisplayOnScreen;
@required
/// Asks the delegate for a view controller instance to use for presenting modal views
/// as a result of user interaction on an ad. Usual implementation may simply return self,
/// if it is view controller class.
- (UIViewController * _Nullable)bannerViewPresentationController SWIFT_WARN_UNUSED_RESULT;
@optional
- (void)bannerView:(AUBannerRenderingView * _Nonnull)bannerView didReceiveAdWithAdSize:(CGSize)adSize;
- (void)bannerView:(AUBannerRenderingView * _Nonnull)bannerView didFailToReceiveAdWith:(NSError * _Nonnull)error;
- (void)bannerViewWillLeaveApplication:(AUBannerRenderingView * _Nonnull)bannerView;
- (void)bannerViewWillPresentModal:(AUBannerRenderingView * _Nonnull)bannerView;
- (void)bannerViewDidDismissModal:(AUBannerRenderingView * _Nonnull)bannerView;
@end

@class AUVideoParameters;
@class AUGAMBannerEventHandler;

/// AUBannerRenderingView.
/// Ad a view that will display the particular ad. It should be added to the UI.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK21AUBannerRenderingView")
@interface AUBannerRenderingView : AUAdView
@property (nonatomic, weak) id <AUBannerRenderingAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSString * _Nonnull configID;
@property (nonatomic, readonly, strong) AUBannerParameters * _Nonnull bannerParameters;
@property (nonatomic, readonly, strong) AUVideoParameters * _Nonnull videoParameters;
@property (nonatomic) NSTimeInterval refreshInterval;
@property (nonatomic, copy) NSArray<NSValue *> * _Nullable additionalSizes;
@property (nonatomic, strong) AUAdFormat * _Nonnull adFormat;
@property (nonatomic) enum AUAdPosition adPosition;
- (void)setVideoParameters:(AUVideoParameters * _Nonnull)videoParameters;
/// Initialize banner rendering view.
/// Lazy load is true by default. Format is HTML-banner as default
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize format:(AUAdFormat * _Nonnull)format isLazyLoad:(BOOL)isLazyLoad eventHandler:(AUGAMBannerEventHandler * _Nonnull)eventHandler OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
/// If you use VIDEO please use ‘setVideoParameters’ method befrore.
- (void)createAd;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



/// AUBannerView.
/// Ad view for demand  banner and/or video.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK12AUBannerView")
@interface AUBannerView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
@property (nonatomic, strong) AUBannerParameters * _Nullable bannerParameters;
/// Initialize banner view
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats OBJC_DESIGNATED_INITIALIZER;
/// Initialize banner view
/// Lazy load is optional to set if needed.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest gamBanner:(UIView * _Nonnull)gamBanner eventHandler:(AUBannerEventHandler * _Nullable)eventHandler;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM(NSInteger, AUContextSubType, closed) {
  AUContextSubTypeGeneral = 10,
  AUContextSubTypeArticle = 11,
  AUContextSubTypeVideo = 12,
  AUContextSubTypeAudio = 13,
  AUContextSubTypeImage = 14,
  AUContextSubTypeUserGenerated = 15,
  AUContextSubTypeSocial = 20,
  AUContextSubTypeEmail = 21,
  AUContextSubTypeChatIM = 22,
  AUContextSubTypeSellingProduct = 30,
  AUContextSubTypeAppStore = 31,
  AUContextSubTypeReviewSite = 32,
  AUContextSubTypeCustom = 500,
};

typedef SWIFT_ENUM(NSInteger, AUContextType, closed) {
  AUContextTypeContent = 1,
  AUContextTypeSocial = 2,
  AUContextTypeProduct = 3,
  AUContextTypeCustom = 4,
};

typedef SWIFT_ENUM(NSInteger, AUDataAsset, closed) {
  AUDataAssetSponsored = 1,
  AUDataAssetDescription = 2,
  AUDataAssetRating = 3,
  AUDataAssetLikes = 4,
  AUDataAssetDownloads = 5,
  AUDataAssetPrice = 6,
  AUDataAssetSaleprice = 7,
  AUDataAssetPhone = 8,
  AUDataAssetAddress = 9,
  AUDataAssetDescription2 = 10,
  AUDataAssetDisplayurl = 11,
  AUDataAssetCtatext = 12,
  AUDataAssetCustom = 500,
};

enum AUEventTrackingType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK15AUEventTracking")
@interface AUEventTracking : NSObject
- (nonnull instancetype)initWithTrackingType:(enum AUEventTrackingType)trackingType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AUEventTrackingType, closed) {
  AUEventTrackingTypeImage = 1,
  AUEventTrackingTypeJs = 2,
  AUEventTrackingTypeCustom = 500,
};

typedef SWIFT_ENUM(NSInteger, AUEventType, closed) {
  AUEventTypeImpression = 1,
  AUEventTypeViewableImpression50 = 2,
  AUEventTypeViewableImpression100 = 3,
  AUEventTypeViewableVideoImpression50 = 4,
  AUEventTypeCustom = 500,
};

@class NSValue;

/// AUGAMBannerEventHandler.
/// To create the GAMBannerEventHandler you should provide:
/// a GAM Ad Unit Id the list of available sizes for this ad unit.
SWIFT_CLASS("_TtC14AudienzziOSSDK23AUGAMBannerEventHandler")
@interface AUGAMBannerEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID validGADAdSizes:(NSArray<NSValue *> * _Nonnull)validGADAdSizes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK29AUGAMInterstitialEventHandler")
@interface AUGAMInterstitialEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK27AUGAMRewardedAdEventHandler")
@interface AUGAMRewardedAdEventHandler : NSObject
- (nonnull instancetype)initWithAdUnitID:(NSString * _Nonnull)adUnitID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class IMAAdSlotSize;

SWIFT_CLASS("_TtC14AudienzziOSSDK10AUIMAUtils")
@interface AUIMAUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AUIMAUtils * _Nonnull shared;)
+ (AUIMAUtils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)generateInstreamUriForGAMWithAdUnitID:(NSString * _Nonnull)adUnitID adSlotSizes:(NSArray<IMAAdSlotSize *> * _Nonnull)adSlotSizes customKeywords:(NSDictionary<NSString *, NSString *> * _Nullable)customKeywords error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, AUImageAsset, closed) {
  AUImageAssetIcon = 1,
  AUImageAssetMain = 3,
  AUImageAssetCustom = 500,
};


/// AUInstreamView.
/// Ad view for demand instream ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK14AUInstreamView")
@interface AUInstreamView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
@property (nonatomic, copy) void (^ _Nullable onLoadInstreamRequest)(NSDictionary<NSString *, NSString *> * _Nullable);
/// Initialize instream view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize OBJC_DESIGNATED_INITIALIZER;
/// Initialize instream view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWithSize:(CGSize)size;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
@end


@class GADInterstitialAd;

SWIFT_CLASS("_TtC14AudienzziOSSDK26AUInterstitialEventHandler")
@interface AUInterstitialEventHandler : NSObject
- (nonnull instancetype)initWithAdUnit:(GADInterstitialAd * _Nonnull)adUnit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AUInterstitialenderingAdDelegate;
enum AURenderingInsterstitialAdFormat : NSInteger;

/// AUInterstitialRenderingView.
/// Ad a view that will display the particular ad. It should be added to the UI.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK27AUInterstitialRenderingView")
@interface AUInterstitialRenderingView : AUAdView
@property (nonatomic, weak) id <AUInterstitialenderingAdDelegate> _Nullable delegate;
@property (nonatomic) double skipButtonArea;
@property (nonatomic) enum AUAdInterstitialPosition skipButtonPosition;
@property (nonatomic) double skipDelay;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad adFormat:(enum AURenderingInsterstitialAdFormat)adFormat minSizePercentage:(NSValue * _Nullable)minSizePercentage eventHandler:(AUGAMInterstitialEventHandler * _Nonnull)eventHandler OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAd;
/// It is expected from the user to call this method on main thread
- (void)showAd:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



/// AUInterstitialView.
/// Ad view for demand Interstitial and/or video.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK18AUInterstitialView")
@interface AUInterstitialView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
/// Initialize Interstitial view
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats OBJC_DESIGNATED_INITIALIZER;
/// Initialize Interstitial view
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Initialize Interstitial view. Convenience variant
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adFormats:(NSArray<AUAdFormat *> * _Nonnull)adFormats isLazyLoad:(BOOL)isLazyLoad minWidthPerc:(NSInteger)minWidthPerc minHeightPerc:(NSInteger)minHeightPerc;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest adUnitID:(NSString * _Nonnull)adUnitID;
- (void)connectHandler:(AUInterstitialEventHandler * _Nonnull)eventHandler;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP14AudienzziOSSDK32AUInterstitialenderingAdDelegate_")
@protocol AUInterstitialenderingAdDelegate <NSObject>
@optional
/// Called when ad is shoed on display and before load (used for lazy load)
- (void)interstitialAdDidDisplayOnScreen;
/// Called when an ad is loaded and ready for display
- (void)interstitialDidReceiveAdWith:(NSString * _Nonnull)configId;
/// Called when the load process fails to produce a viable ad
- (void)interstitialDidFailToReceiveAdWithErrorWithError:(NSError * _Nullable)error;
/// Called when the interstitial view will be launched,  as a result of show() method.
- (void)interstitialWillPresentAd;
/// Called when the interstitial is dismissed by the user
- (void)interstitialDidDismissAd;
/// Called when an ad causes the sdk to leave the app
- (void)interstitialWillLeaveApplication;
/// Called when user clicked the ad
- (void)interstitialDidClickAd;
@end

@class NSNumber;
@class AUMORTBContentProducer;

/// Describes an <a href="https://www.iab.com/wp-content/uploads/2016/03/OpenRTB-API-Specification-Version-2-5-FINAL.pdf">OpenRTB</a> app: content object
SWIFT_CLASS("_TtC14AudienzziOSSDK17AUMORTBAppContent")
@interface AUMORTBAppContent : NSObject
/// ID uniquely identifying the content.
@property (nonatomic, copy) NSString * _Nullable id;
/// Episode number.
@property (nonatomic, strong) NSNumber * _Nullable episode;
/// Content title.
@property (nonatomic, copy) NSString * _Nullable title;
/// Content series.
@property (nonatomic, copy) NSString * _Nullable series;
/// Content season.
@property (nonatomic, copy) NSString * _Nullable season;
/// Artist credited with the content.
@property (nonatomic, copy) NSString * _Nullable artist;
/// Genre that best describes the content.
@property (nonatomic, copy) NSString * _Nullable genre;
/// Album to which the content belongs; typically for audio.
@property (nonatomic, copy) NSString * _Nullable album;
/// International Standard Recording Code conforming to ISO- 3901.
@property (nonatomic, copy) NSString * _Nullable isrc;
/// This object defines the producer of the content in which the ad will be shown.
@property (nonatomic, strong) AUMORTBContentProducer * _Nullable producer;
/// URL of the content, for buy-side contextualization or review.
@property (nonatomic, copy) NSString * _Nullable url;
/// Array of IAB content categories that describe the content producer.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable cat;
/// Production quality.
@property (nonatomic, strong) NSNumber * _Nullable prodq;
/// Type of content (game, video, text, etc.).
@property (nonatomic, strong) NSNumber * _Nullable context;
/// Content rating.
@property (nonatomic, copy) NSString * _Nullable contentrating;
/// User rating of the content.
@property (nonatomic, copy) NSString * _Nullable userrating;
/// Media rating per IQG guidelines.
@property (nonatomic, strong) NSNumber * _Nullable qagmediarating;
/// Comma separated list of keywords describing the content.
@property (nonatomic, copy) NSString * _Nullable keywords;
/// 0 = not live, 1 = content is live.
@property (nonatomic, strong) NSNumber * _Nullable livestream;
/// 0 = indirect, 1 = direct.
@property (nonatomic, strong) NSNumber * _Nullable sourcerelationship;
/// Length of content in seconds; appropriate for video or audio.
@property (nonatomic, strong) NSNumber * _Nullable len;
/// Content language using ISO-639-1-alpha-2.
@property (nonatomic, copy) NSString * _Nullable language;
/// Indicator of whether or not the content is embeddable (e.g., an embeddable video player), where 0 = no, 1 = yes.
@property (nonatomic, strong) NSNumber * _Nullable embeddable;
/// The data and segment objects together allow additional data about the related object (e.g., user, content) to be specified.
@property (nonatomic, copy) NSArray<AUMORTBContentData *> * _Nullable data;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class AUMORTBContentSegment;

SWIFT_CLASS("_TtC14AudienzziOSSDK18AUMORTBContentData")
@interface AUMORTBContentData : NSObject
/// Exchange-specific ID for the data provider.
@property (nonatomic, copy) NSString * _Nullable id;
/// Exchange-specific name for the data provider.
@property (nonatomic, copy) NSString * _Nullable name;
/// Segment objects are essentially key-value pairs that convey specific units of data.
@property (nonatomic, copy) NSArray<AUMORTBContentSegment *> * _Nullable segment;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14AudienzziOSSDK22AUMORTBContentProducer")
@interface AUMORTBContentProducer : NSObject
/// Content producer or originator ID.
@property (nonatomic, copy) NSString * _Nullable id;
/// Content producer or originator name
@property (nonatomic, copy) NSString * _Nullable name;
/// Array of IAB content categories that describe the content producer.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable cat;
/// Highest level domain of the content producer.
@property (nonatomic, copy) NSString * _Nullable domain;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14AudienzziOSSDK21AUMORTBContentSegment")
@interface AUMORTBContentSegment : NSObject
/// ID of the data segment specific to the data provider.
@property (nonatomic, copy) NSString * _Nullable id;
/// Name of the data segment specific to the data provider.
@property (nonatomic, copy) NSString * _Nullable name;
/// String representation of the data segment value.
@property (nonatomic, copy) NSString * _Nullable value;
/// Placeholder for exchange-specific extensions to OpenRTB.
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol AUNativeAdDelegate;
@class NativeAd;

/// AUMultiplatformView.
/// Ad view for demand combinations of ad type. It allows to run bid requests with any combination of banner, video, and native formats.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK19AUMultiplatformView")
@interface AUMultiplatformView : AUAdView
@property (nonatomic, weak) id <AUNativeAdDelegate> _Nullable delegate;
@property (nonatomic, copy) void (^ _Nullable onGetNativeAd)(NativeAd * _Nonnull);
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createWith:(id _Nonnull)gamRequest;
- (void)findNativeWithAdObject:(id _Nonnull)adObject;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


@class AUNativeAdMarkup;
@protocol AUNativeAdEventDelegate;
@class AUNativeTitle;
@class AUNativeData;
@class AUNativeImage;
@class AUNativeEventTrackerResponse;
enum AUNativeDataAssetType : NSInteger;
enum AUNativeImageAssetType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK10AUNativeAd")
@interface AUNativeAd : NSObject
@property (nonatomic, readonly, strong) AUNativeAdMarkup * _Nullable nativeAdMarkup;
@property (nonatomic, weak) id <AUNativeAdEventDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<AUNativeTitle *> * _Nonnull titles;
@property (nonatomic, readonly, copy) NSArray<AUNativeData *> * _Nonnull dataObjects;
@property (nonatomic, readonly, copy) NSArray<AUNativeImage *> * _Nonnull images;
@property (nonatomic, readonly, copy) NSArray<AUNativeEventTrackerResponse *> * _Nullable eventTrackers;
- (NSArray<AUNativeData *> * _Nonnull)dataObjectsOf:(enum AUNativeDataAssetType)dataType SWIFT_WARN_UNUSED_RESULT;
- (NSArray<AUNativeImage *> * _Nonnull)imagesOf:(enum AUNativeImageAssetType)imageType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable sponsoredBy;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable callToAction;
- (BOOL)registerViewWithView:(UIView * _Nullable)view clickableViews:(NSArray<UIView *> * _Nullable)clickableViews;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK18AUNativeAdDelegate_")
@protocol AUNativeAdDelegate
/// Native was not found in the server returned response,
/// Please display the ad as regular ways
- (void)nativeAdNotFound;
/// Native ad was returned, however, the bid is not valid for displaying
/// Should be treated as on ad load failed
- (void)nativeAdNotValid;
@end


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK23AUNativeAdEventDelegate_")
@protocol AUNativeAdEventDelegate
@optional
/// Sent when the native ad is expired.
- (void)adDidExpireWithAd:(AUNativeAd * _Nonnull)ad;
/// Sent when the native view is clicked by the user.
- (void)adWasClickedWithAd:(AUNativeAd * _Nonnull)ad;
/// Sent when  an impression is recorded for an native ad
- (void)adDidLogImpressionWithAd:(AUNativeAd * _Nonnull)ad;
@end

@class AUNativeAdMarkupAsset;
@class AUNativeLink;

SWIFT_CLASS("_TtC14AudienzziOSSDK16AUNativeAdMarkup")
@interface AUNativeAdMarkup : NSObject
/// Version of the Native Markup version in use.
@property (nonatomic, copy) NSString * _Nullable version;
/// List of native ad’s assets.
/// Required if no assetsurl.
/// Recommended as fallback even if assetsurl is provided.
@property (nonatomic, copy) NSArray<AUNativeAdMarkupAsset *> * _Nullable assets;
/// URL of an alternate source for the assets object.
/// The expected response is a JSON object mirroring the assets object in the bid response,
/// subject to certain requirements as specified in the individual objects.
/// Where present, overrides the asset object in the response.
@property (nonatomic, copy) NSString * _Nullable assetsurl;
/// URL where a dynamic creative specification may be found for populating this ad, per the Dynamic Content Ads Specification.
/// Note this is a beta option as the interpretation of the Dynamic Content Ads Specification and how to assign those elements
/// into a native ad is outside the scope of this spec and must be agreed offline between the parties
/// or as may be specified in a future revision of the Dynamic Content Ads spec.
/// Where present, overrides the asset object in the response.
@property (nonatomic, copy) NSString * _Nullable dcourl;
/// Destination Link.
/// This is default link object for the ad.
/// Individual assets can also have a link object which applies if the asset is activated(clicked).
/// If the asset doesn’t have a link object, the parent link object applies.
/// See LinkObject Definition
@property (nonatomic, strong) AUNativeLink * _Nullable link;
/// Array of impression tracking URLs, expected to return a 1x1 image or 204 response - typically only passed when using 3rd party trackers.
/// To be deprecated - replaced with eventtrackers.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable imptrackers;
/// Optional JavaScript impression tracker.
/// This is a valid HTML, Javascript is already wrapped in <script> tags.
/// It should be executed at impression time where it can be supported.
/// To be deprecated - replaced with eventtrackers.
@property (nonatomic, copy) NSString * _Nullable jstracker;
/// Array of tracking objects to run with the ad, in response to the declared supported methods in the request.
/// Replaces imptrackers and jstracker, to be deprecated.
@property (nonatomic, copy) NSArray<AUNativeEventTrackerResponse *> * _Nullable eventtrackers;
/// If support was indicated in the request, URL of a page informing the user about the buyer’s targeting activity.
@property (nonatomic, copy) NSString * _Nullable privacy;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK21AUNativeAdMarkupAsset")
@interface AUNativeAdMarkupAsset : NSObject
/// Title object for title assets.
/// See TitleObject definition.
@property (nonatomic, strong) AUNativeTitle * _Nullable title;
/// Image object for image assets.
/// See ImageObject definition.
@property (nonatomic, strong) AUNativeImage * _Nullable img;
/// Data object for ratings, prices etc.
@property (nonatomic, strong) AUNativeData * _Nullable data;
/// Link object for call to actions.
/// The link object applies if the asset item is activated (clicked).
/// If there is no link object on the asset, the parent link object on the bid response applies.
@property (nonatomic, strong) AUNativeLink * _Nullable link;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUNativeAsset")
@interface AUNativeAsset : NSObject
@property (nonatomic) BOOL required;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK17AUNativeAssetData")
@interface AUNativeAssetData : AUNativeAsset
@property (nonatomic, strong) id _Nullable ext;
- (nonnull instancetype)initWithType:(enum AUDataAsset)type required:(BOOL)required OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK18AUNativeAssetImage")
@interface AUNativeAssetImage : AUNativeAsset
@property (nonatomic, copy) NSArray<NSString *> * _Nullable mimes;
@property (nonatomic, strong) id _Nullable ext;
- (nonnull instancetype)initWithMinimumWidth:(NSInteger)minimumWidth minimumHeight:(NSInteger)minimumHeight required:(BOOL)required;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK18AUNativeAssetTitle")
@interface AUNativeAssetTitle : AUNativeAsset
@property (nonatomic, strong) id _Nullable ext;
- (nonnull instancetype)initWithLength:(NSInteger)length required:(BOOL)required OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsRequired:(BOOL)isRequired SWIFT_UNAVAILABLE;
@end


/// AUNativeBannerView.
/// Ad view for demand native banner.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK18AUNativeBannerView")
@interface AUNativeBannerView : AUAdView
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC14AudienzziOSSDK12AUNativeData")
@interface AUNativeData : NSObject
/// The formatted string of data to be displayed.
/// Can contain a formatted value such as “5 stars” or “$10” or “3.4 stars out of 5”.
@property (nonatomic, copy) NSString * _Nullable value;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AUNativeDataAssetType, closed) {
  AUNativeDataAssetTypeUndefined = 0,
  AUNativeDataAssetTypeSponsored = 1,
/// Sponsored By message where response should contain the brand name of the sponsor.
  AUNativeDataAssetTypeDesc = 2,
/// Descriptive text associated with the product or service being advertised. Longer length of text in response may be truncated or ellipsed by the exchange.
  AUNativeDataAssetTypeRating = 3,
/// Rating of the product being offered to the user. For example an app’s rating in an app store from 0-5.
  AUNativeDataAssetTypeLikes = 4,
/// Number of social ratings or “likes” of the product being offered to the user.
  AUNativeDataAssetTypeDownloads = 5,
/// Number downloads/installs of this product
  AUNativeDataAssetTypePrice = 6,
/// Price for product / app / in-app purchase. Value should include currency symbol in localised format.
  AUNativeDataAssetTypeSalePrice = 7,
/// Sale price that can be used together with price to indicate a discounted price compared to a regular price. Value should include currency symbol in localised format.
  AUNativeDataAssetTypePhone = 8,
/// Phone number
  AUNativeDataAssetTypeAddress = 9,
/// Address
  AUNativeDataAssetTypeDesc2 = 10,
/// Additional descriptive text associated text with the product or service being advertised
  AUNativeDataAssetTypeDisplayURL = 11,
/// Display URL for the text ad. To be used when sponsoring entity doesn’t own the content. IE sponsored by BRAND on SITE (where SITE is transmitted in this field).
  AUNativeDataAssetTypeCtaText = 12,
/// CTA description - descriptive text describing a ‘call to action’ button for the destination URL.
  AUNativeDataAssetTypeCustom = 500,
};


SWIFT_CLASS("_TtC14AudienzziOSSDK20AUNativeEventTracker")
@interface AUNativeEventTracker : NSObject
- (nonnull instancetype)initWithEvent:(enum AUEventType)event methods:(NSArray<AUEventTracking *> * _Nonnull)methods OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK28AUNativeEventTrackerResponse")
@interface AUNativeEventTrackerResponse : NSObject
/// The URL of the image or js.
/// Required for image or js, optional for custom.
@property (nonatomic, copy) NSString * _Nullable url;
/// To be agreed individually with the exchange, an array of key:value objects for custom tracking,
/// for example the account number of the DSP with a tracking company. IE {“accountnumber”:”123”}.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable customdata;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUNativeImage")
@interface AUNativeImage : NSObject
/// URL of the image asset.
@property (nonatomic, copy) NSString * _Nullable url;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AUNativeImageAssetType, closed) {
  AUNativeImageAssetTypeIcon = 1,
  AUNativeImageAssetTypeMain = 3,
  AUNativeImageAssetTypeCustom = 500,
};


SWIFT_CLASS("_TtC14AudienzziOSSDK12AUNativeLink")
@interface AUNativeLink : NSObject
/// Landing URL of the clickable link.
@property (nonatomic, copy) NSString * _Nullable url;
/// List of third-party tracker URLs to be fired on click of the URL.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable clicktrackers;
/// Fallback URL for deeplink.
/// To be used if the URL given in url is not supported by the device.
@property (nonatomic, copy) NSString * _Nullable fallback;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AudienzziOSSDK13AUNativeTitle")
@interface AUNativeTitle : NSObject
/// The text associated with the text element.
@property (nonatomic, copy) NSString * _Nullable text;
/// This object is a placeholder that may contain custom JSON agreed to by the parties to support
/// flexibility beyond the standard defined in this specification
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, AUNativeType, closed) {
  AUNativeTypeOrigin = 0,
  AUNativeTypeRendering = 1,
};


/// AUNativeView.
/// Ad view for demand  Native ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK12AUNativeView")
@interface AUNativeView : AUAdView
@property (nonatomic, copy) void (^ _Nullable onNativeLoadRequest)(id _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onGetNativeAd)(AUNativeAd * _Nonnull);
@property (nonatomic, weak) id <AUNativeAdDelegate> _Nullable delegate;
/// Initialize native style view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adType:(enum AUNativeType)adType OBJC_DESIGNATED_INITIALIZER;
/// Initialize native style view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad adType:(enum AUNativeType)adType OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest;
- (void)findNativeWithAdObject:(id _Nonnull)adObject;
- (BOOL)registerViewWithClickableViews:(NSArray<UIView *> * _Nullable)clickableViews;
- (void)findRenderingAd:(AUNativeAd * _Nullable)ad;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


/// <h1>OpenRTB - Video Placement Types</h1>
/// \code
/// | Value | Description                  |
/// |-------|------------------------------|
/// | 1     | In-Stream                    |
/// | 2     | In-Banner                    |
/// | 3     | In-Article                   |
/// | 4     | In-Feed                      |
/// | 5     | Interstitial/Slider/Floating |
///
/// \endcode
typedef SWIFT_ENUM_NAMED(NSInteger, AUPlacement, "AUPlacement", closed) {
  AUPlacementInStream = 0,
  AUPlacementInBanner = 1,
  AUPlacementInArticle = 2,
  AUPlacementInFeed = 3,
  AUPlacementInterstitial = 4,
};

typedef SWIFT_ENUM(NSInteger, AUPlacementType, closed) {
  AUPlacementTypeFeedContent = 1,
  AUPlacementTypeAtomicContent = 2,
  AUPlacementTypeOutsideContent = 3,
  AUPlacementTypeRecommendationWidget = 4,
  AUPlacementTypeCustom = 500,
};

typedef SWIFT_ENUM(NSInteger, AURenderingInsterstitialAdFormat, closed) {
  AURenderingInsterstitialAdFormatBanner = 0,
  AURenderingInsterstitialAdFormatVideo = 1,
};

typedef SWIFT_ENUM(NSInteger, AUResultCode, closed) {
  AUResultCodeAudienzzDemandFetchSuccess = 0,
  AUResultCodeAudienzzServerNotSpecified = 1,
  AUResultCodeAudienzzInvalidAccountId = 2,
  AUResultCodeAudienzzInvalidConfigId = 3,
  AUResultCodeAudienzzInvalidSize = 4,
  AUResultCodeAudienzzNetworkError = 5,
  AUResultCodeAudienzzServerError = 6,
  AUResultCodeAudienzzDemandNoBids = 7,
  AUResultCodeAudienzzDemandTimedOut = 8,
  AUResultCodeAudienzzServerURLInvalid = 9,
  AUResultCodeAudienzzUnknownError = 10,
  AUResultCodeAudienzzInvalidResponseStructure = 1000,
  AUResultCodeAudienzzInternalSDKError = 7000,
  AUResultCodeAudienzzWrongArguments = 7001,
  AUResultCodeAudienzzNoVastTagInMediaData = 7002,
  AUResultCodeAudienzzSDKMisuse = 8000,
  AUResultCodeAudienzzSDKMisusePreviousFetchNotCompletedYet = 8001,
  AUResultCodeAudienzzInvalidRequest = 8002,
};


SWIFT_PROTOCOL("_TtP14AudienzziOSSDK24AURewardedAdUnitDelegate_")
@protocol AURewardedAdUnitDelegate <NSObject>
@optional
/// Called when ad is shoed on display and before load (used for lazy load)
- (void)rewardedAdDidDisplayOnScreen;
/// Called when an ad is loaded and ready for display
- (void)rewardedAdDidReceiveAd;
/// Called when user is able to receive a reward from the app
- (void)rewardedAdUserDidEarnReward:(NSObject * _Nullable)reward;
/// Called when the load process fails to produce a viable ad
- (void)rewardedAdDidFailToReceiveAdWithError:(NSError * _Nullable)error;
/// Called when the interstitial view will be launched,  as a result of show() method.
- (void)rewardedAdWillPresentAd;
/// Called when the interstial is dismissed by the user
- (void)rewardedAdDidDismissAd;
/// Called when an ad causes the sdk to leave the app
- (void)rewardedAdWillLeaveApplication;
/// Called when user clicked the ad
- (void)rewardedAdDidClickAd;
@end

@class GADRewardedAd;

SWIFT_CLASS("_TtC14AudienzziOSSDK22AURewardedEventHandler")
@interface AURewardedEventHandler : NSObject
- (nonnull instancetype)initWithAdUnit:(GADRewardedAd * _Nonnull)adUnit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AUInstreamView.
/// Ad view for demand instream ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK23AURewardedRenderingView")
@interface AURewardedRenderingView : AUAdView
@property (nonatomic, weak) id <AURewardedAdUnitDelegate> _Nullable delegate;
/// Initialize rewarded view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad minSizePercentage:(NSValue * _Nullable)minSizePercentage eventHandler:(AUGAMRewardedAdEventHandler * _Nonnull)eventHandler OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAd;
/// It is expected from the user to call this method on main thread
- (void)showAd:(UIViewController * _Nonnull)controller;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end



/// AURewardedView.
/// Ad view for demand  Rewarded ad type.
/// Lazy load is true by default.
SWIFT_CLASS("_TtC14AudienzziOSSDK14AURewardedView")
@interface AURewardedView : AUAdView
@property (nonatomic, strong) AUVideoParameters * _Nullable parameters;
/// Initialize rewarded view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId OBJC_DESIGNATED_INITIALIZER;
/// Initialize rewarded view.
/// Lazy load is true by default.
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId isLazyLoad:(BOOL)isLazyLoad OBJC_DESIGNATED_INITIALIZER;
/// Function for prepare and make request for ad. If Lazy load enabled request will be send only when view will appear on screen.
- (void)createAdWith:(id _Nonnull)gamRequest adUnitID:(NSString * _Nonnull)adUnitID;
- (void)connectHandler:(AURewardedEventHandler * _Nonnull)eventHandler;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize isLazyLoad:(BOOL)isLazyLoad SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId adSize:(CGSize)adSize SWIFT_UNAVAILABLE;
@end


@class AUVideoPlaybackMethod;
@class AUVideoProtocols;
enum AUVideoStartDelay : NSInteger;

/// VideoParameters..
/// If will be nill. Automatically create default video parameters
/// <h1>Example</h1>
/// <ul>
///   <li>
///     AUVideoParameters(mimes: [“video/mp4”])
///   </li>
///   <li>
///     protocols = [AdVideoParameters.Protocols.VAST_2_0]
///   </li>
///   <li>
///     playbackMethod = [AdVideoParameters.PlaybackMethod.AutoPlaySoundOff]
///   </li>
///   <li>
///     placement = AdVideoParameters.Placement.InBanner
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14AudienzziOSSDK17AUVideoParameters")
@interface AUVideoParameters : NSObject
/// List of supported API frameworks for this impression. If an API is not explicitly listed, it is assumed not to be supported.
@property (nonatomic, copy) NSArray<AUApi *> * _Nullable api;
/// Content MIME types supported.
/// Prebid Server required property.
/// <h1>Example</h1>
/// <ul>
///   <li>
///     “video/mp4”
///   </li>
///   <li>
///     “video/x-ms-wmv”
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull mimes;
/// Allowed playback methods. If none specified, assume all are allowed.
@property (nonatomic, copy) NSArray<AUVideoPlaybackMethod *> * _Nullable playbackMethod;
/// Array of supported video bid response protocols.
@property (nonatomic, copy) NSArray<AUVideoProtocols *> * _Nullable protocols;
/// \param mimes supported MIME types
///
- (nonnull instancetype)initWithMimes:(NSArray<NSString *> * _Nonnull)mimes OBJC_DESIGNATED_INITIALIZER;
- (void)setSize:(NSValue * _Nonnull)size;
/// Indicates if the impression must be linear, nonlinear, etc. If none specified, assume all are allowed.
- (void)setLinearity:(NSNumber * _Nonnull)linearity;
/// Maximum bit rate in Kbps.
- (void)setMaxBitrate:(NSNumber * _Nonnull)value;
/// Minimum bit rate in Kbps.
- (void)setMinBitrate:(NSNumber * _Nonnull)value;
/// Maximum video ad duration in seconds.
- (void)setMaxDuration:(NSNumber * _Nonnull)value;
/// Minimum video ad duration in seconds.
- (void)setMinDuration:(NSNumber * _Nonnull)value;
/// Indicates the start delay in seconds for pre-roll, mid-roll, or post-roll ad placements.
- (void)setStartDelay:(enum AUVideoStartDelay)value;
/// Placement type for the impression.
- (void)setPlacement:(enum AUPlacement)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum AUVideoPlaybackMethodType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK21AUVideoPlaybackMethod")
@interface AUVideoPlaybackMethod : NSObject
- (nonnull instancetype)initWithType:(enum AUVideoPlaybackMethodType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h1>OpenRTB - Playback Methods</h1>
/// \code
/// | Value | Description                                              |
/// |-------|----------------------------------------------------------|
/// | 1     | Initiates on Page Load with Sound On                     |
/// | 2     | Initiates on Page Load with Sound Off by Default         |
/// | 3     | Initiates on Click with Sound On                         |
/// | 4     | Initiates on Mouse-Over with Sound On                    |
/// | 5     | Initiates on Entering Viewport with Sound On             |
/// | 6     | Initiates on Entering Viewport with Sound Off by Default |
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, AUVideoPlaybackMethodType, closed) {
  AUVideoPlaybackMethodTypeAutoPlaySoundOn = 1,
  AUVideoPlaybackMethodTypeAutoPlaySoundOff = 2,
  AUVideoPlaybackMethodTypeClickToPlay = 3,
  AUVideoPlaybackMethodTypeMouseOver = 4,
  AUVideoPlaybackMethodTypeEnterSoundOn = 5,
  AUVideoPlaybackMethodTypeEnterSoundOff = 6,
};

enum AUVideoProtocolsType : NSInteger;

SWIFT_CLASS("_TtC14AudienzziOSSDK16AUVideoProtocols")
@interface AUVideoProtocols : NSObject
- (nonnull instancetype)initWithType:(enum AUVideoProtocolsType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <h1>OpenRTB - Protocols</h1>
/// \code
/// | Value | Description       |
/// |-------|-------------------|
/// | 1     | VAST 1.0          |
/// | 2     | VAST 2.0          |
/// | 3     | VAST 3.0          |
/// | 4     | VAST 1.0 Wrapper  |
/// | 5     | VAST 2.0 Wrapper  |
/// | 6     | VAST 3.0 Wrapper  |
/// | 7     | VAST 4.0          |
/// | 8     | VAST 4.0 Wrapper  |
/// | 9     | DAAST 1.0         |
/// | 10    | DAAST 1.0 Wrapper |
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, AUVideoProtocolsType, closed) {
  AUVideoProtocolsTypeVAST_1_0 = 1,
  AUVideoProtocolsTypeVAST_2_0 = 2,
  AUVideoProtocolsTypeVAST_3_0 = 3,
  AUVideoProtocolsTypeVAST_1_0_Wrapped = 4,
  AUVideoProtocolsTypeVAST_2_0_Wrapped = 5,
  AUVideoProtocolsTypeVAST_3_0_Wrapped = 6,
  AUVideoProtocolsTypeVAST_4_0 = 7,
  AUVideoProtocolsTypeVAST_4_0_Wrapped = 8,
  AUVideoProtocolsTypeDAAST_1_0 = 9,
  AUVideoProtocolsTypeDAAST_1_0_Wrapped = 10,
};

/// <h1>OpenRTB - Start Delay</h1>
/// \code
/// | Value | Description                                      |
/// |-------|--------------------------------------------------|
/// | > 0   | Mid-Roll (value indicates start delay in second) |
/// | 0     | Pre-Roll                                         |
/// | -1    | Generic Mid-Roll                                 |
/// | -2    | Generic Post-Roll                                |
///
/// \endcode
typedef SWIFT_ENUM_NAMED(NSInteger, AUVideoStartDelay, "AUVideoStartDelay", closed) {
  AUVideoStartDelayPreRoll = 0,
  AUVideoStartDelayGenericMidRoll = -1,
  AUVideoStartDelayGenericPostRoll = -2,
};


SWIFT_CLASS("_TtC14AudienzziOSSDK8Audienzz")
@interface Audienzz : NSObject
@property (nonatomic) BOOL timeoutUpdated;
@property (nonatomic, copy) NSString * _Nonnull audienzServerAccountId;
@property (nonatomic) BOOL pbsDebug;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customHeaders;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull storedBidResponses;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Audienzz * _Nonnull shared;)
+ (Audienzz * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)configureSDKWithAudienzzKey:(NSString * _Nonnull)audienzzKey;
- (void)configureSDKWithAudienzzKey:(NSString * _Nonnull)audienzzKey gadMobileAdsVersion:(NSString * _Nullable)gadMobileAdsVersion;
/// Use this function only to make RN bridging initialize
- (void)configureSDK_RNWithAudienzzKey:(NSString * _Nonnull)audienzzKey :(void (^ _Nullable)(void))completion;
/// Use this function only to make RN bridging initialize
- (void)configureSDK_RNWithAudienzzKey:(NSString * _Nonnull)audienzzKey gadMobileAdsVersion:(NSString * _Nullable)gadMobileAdsVersion :(void (^ _Nullable)(void))completion;
@property (nonatomic) NSInteger timeoutMillis;
@property (nonatomic, strong) NSNumber * _Nullable timeoutMillisDynamic;
@property (nonatomic, copy) NSString * _Nullable storedAuctionResponse;
- (void)addStoredBidResponseWithBidder:(NSString * _Nonnull)bidder responseId:(NSString * _Nonnull)responseId;
- (void)clearStoredBidResponses;
- (NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable)getStoredBidResponses SWIFT_WARN_UNUSED_RESULT;
- (void)addCustomHeaderWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value;
- (void)clearCustomHeaders;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GAMRequest;

SWIFT_CLASS("_TtC14AudienzziOSSDK16AudienzzGAMUtils")
@interface AudienzzGAMUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudienzzGAMUtils * _Nonnull shared;)
+ (AudienzzGAMUtils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (void)initializeGAM;
- (void)prepareRequest:(GAMRequest * _Nonnull)request bidTargeting:(NSDictionary<NSString *, NSString *> * _Nonnull)bidTargeting;
@end

@class GADNativeAd;
@class NSError;
@class GADCustomNativeAd;

@interface AudienzzGAMUtils (SWIFT_EXTENSION(AudienzziOSSDK))
- (void)findNativeAdObjcFor:(GADNativeAd * _Nonnull)nativeAd completion:(void (^ _Nonnull)(NativeAd * _Nullable, NSError * _Nullable))completion;
- (void)findCustomNativeAdFor:(GADCustomNativeAd * _Nonnull)nativeAd completion:(void (^ _Nonnull)(AUNativeAd * _Nullable, NSError * _Nullable))completion;
- (void)findCustomNativeAdObjcFor:(GADCustomNativeAd * _Nonnull)nativeAd completion:(void (^ _Nonnull)(NativeAd * _Nullable, NSError * _Nullable))completion;
@end








#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
